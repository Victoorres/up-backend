generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  professionalId String?       @unique
  professional   Professional? @relation("UserProfessional", fields: [professionalId], references: [id])

  partnerSupplierId String?          @unique
  partnerSupplier   PartnerSupplier? @relation("UserPartner", fields: [partnerSupplierId], references: [id])

  loveDecorationId String?          @unique
  loveDecoration   LoveDecoration[] @relation("UserLoveDecoration")
}

model Professional {
  id                 String            @id @default(uuid())
  name               String
  profession         String
  document           String?
  generalRegister    String?
  registrationAgency String?
  description        String?
  experience         String?
  officeName         String?
  verified           Boolean           @default(false)
  featured           Boolean           @default(false)
  level              ProfessionalLevel @default(BRONZE)
  points             Int               @default(0)
  profileImage       String?
  phone              String
  socialMediaId      String?           @unique
  social             SocialMedia?      @relation(fields: [socialMediaId], references: [id])
  address            Address?          @relation(fields: [addressId], references: [id])
  addressId          String?

  user               User?               @relation("UserProfessional")
  workshops          Workshop[]
  pointHistory       PointHistory[]
  eventRegistrations EventRegistration[]
}

model PartnerSupplier {
  id                String  @id @default(uuid())
  tradeName         String
  companyName       String
  document          String
  stateRegistration String?
  contact           String?
  profileImage      String?

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  accessPending Boolean @default(true)

  user    User?   @relation("UserPartner")
  store   Store?
  storeId String? @unique
}

model SocialMedia {
  id        String  @id @default(uuid())
  linkedin  String?
  instagram String?
  whatsapp  String?

  professional Professional?
  listedProfessional ListedProfessional?
}

model Address {
  id         String  @id @default(uuid())
  state      String
  city       String
  district   String
  street     String?
  complement String?
  number     String?
  zipCode    String?

  professionals    Professional[]
  partnerSuppliers PartnerSupplier[]
  stores           Store[]
  events           Event[]
  loveDecoration   LoveDecoration[]
}

model Store {
  id           String  @id @default(uuid())
  name         String
  description  String?
  website      String?
  rating       Float?  @default(0)
  openingHours String?
  address      Address @relation(fields: [addressId], references: [id])
  addressId    String

  partnerId String          @unique
  partner   PartnerSupplier @relation(fields: [partnerId], references: [id])

  products Product[]
  events   Event[]
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  link        String?
  featured    Boolean @default(false)
  promotion   Boolean @default(false)
  storeId     String
  store       Store   @relation(fields: [storeId], references: [id])
}

model Event {
  id           String              @id @default(uuid())
  name         String
  description  String
  date         DateTime
  type         String
  points       Int                 @default(0)
  totalSpots   Int
  filledSpots  Int                 @default(0)
  address      Address             @relation(fields: [addressId], references: [id])
  addressId    String
  storeId      String
  store        Store               @relation(fields: [storeId], references: [id])
  participants EventRegistration[]
}

model EventRegistration {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        String
  registeredAt   DateTime     @default(now())
}

model PointHistory {
  id             String         @id @default(uuid())
  operation      PointOperation
  value          Int
  source         String
  professional   Professional   @relation(fields: [professionalId], references: [id])
  professionalId String
  createdAt      DateTime       @default(now())
}

model Workshop {
  id             String           @id @default(uuid())
  name           String
  description    String
  duration       String
  points         Int
  type           WorkshopType
  professional   Professional     @relation(fields: [professionalId], references: [id])
  professionalId String
  modules        WorkshopModule[]
}

model WorkshopModule {
  id         String   @id @default(uuid())
  name       String
  content    String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId String
}

model Coupon {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  quantity  Int
  createdAt DateTime @default(now())
}

model ListedProfessional {
  id          String   @id @default(uuid())
  name        String
  profession  String
  description String?
  phone       String
  email       String?

  state       String
  city        String
  district    String
  street      String?
  number      String?
  complement  String?
  zipCode     String?

  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  socialMediaId String?      @unique

  availableDays AvailableDay[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

model AvailableDay {
  id                   String             @id @default(uuid())
  dayOfWeek            WeekDay
  listedProfessional   ListedProfessional @relation(fields: [listedProfessionalId], references: [id])
  listedProfessionalId String
}

model LoveDecoration {
  id        String @id @default(uuid())
  name      String
  contact   String
  instagram String
  tiktok    String

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?

  user   User?   @relation("UserLoveDecoration", fields: [userId], references: [id])
  userId String?
}
/**
 * ENUMS:
*/

 enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ProfessionalLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum PointOperation {
  ADD
  REMOVE
}

enum WorkshopType {
  ONLINE
  PRESENTIAL
  HYBRID
}
